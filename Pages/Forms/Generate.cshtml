@page
@model DigiDocWebApp.Pages.Forms.GenerateModel
@{
    ViewData["Title"] = "Generate Digital Form";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header Section -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="h3 mb-1">Generate Digital Form</h2>
                    <p class="text-muted mb-0">Upload an image of your paper form to convert it to a digital form using AI</p>
                </div>
                <a href="/pages/forms" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Forms
                </a>
            </div>

            <!-- Main Content -->
            <div class="row">
                <!-- Upload Section -->
                <div class="col-lg-6">
                    <div class="card h-100">
                        <div class="card-header">
                            <h5 class="mb-0"><i class="fas fa-upload text-primary"></i> Upload Form Image</h5>
                        </div>
                        <div class="card-body">
                            <form id="uploadForm" enctype="multipart/form-data">
                                <div class="mb-3">
                                    <label for="formName" class="form-label">Form Name <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="formName" name="formName" placeholder="Enter a name for this form" required>
                                    <div class="form-text">This will be the display name for your digital form</div>
                                </div>

                                <div class="mb-3">
                                    <label for="formDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="formDescription" name="formDescription" rows="3" placeholder="Brief description of this form"></textarea>
                                </div>

                                <div class="mb-3">
                                    <label for="formCategory" class="form-label">Category</label>
                                    <select class="form-select" id="formCategory" name="formCategory">
                                        <option value="General">General</option>
                                        <option value="401k">401(k) Plans</option>
                                        <option value="COBRA">COBRA Plans</option>
                                        <option value="Health">Health Benefits</option>
                                        <option value="Dental">Dental Benefits</option>
                                        <option value="Vision">Vision Benefits</option>
                                        <option value="Life">Life Insurance</option>
                                        <option value="Disability">Disability Insurance</option>
                                        <option value="HSA">Health Savings Account</option>
                                        <option value="FSA">Flexible Spending Account</option>
                                        <option value="Onboarding">Employee Onboarding</option>
                                        <option value="Enrollment">Benefits Enrollment</option>
                                    </select>
                                </div>

                                <div class="mb-4">
                                    <label for="formFile" class="form-label">Form File <span class="text-danger">*</span></label>
                                    <div class="upload-area" id="uploadArea">
                                        <input type="file" class="form-control" id="formFile" name="formFile" accept="image/*,.pdf,.doc,.docx" required style="display: none;">
                                        <div class="upload-content text-center p-4">
                                            <i class="fas fa-cloud-upload-alt fa-3x text-primary mb-3"></i>
                                            <h5>Drag & Drop your form file here</h5>
                                            <p class="text-muted mb-3">or <a href="#" id="browseLink">browse to select a file</a></p>
                                            <small class="text-muted">Supported formats: JPG, PNG, GIF, PDF, DOC, DOCX (Max size: 10MB)</small>
                                        </div>
                                        <div class="preview-area" id="previewArea" style="display: none;">
                                            <img id="imagePreview" class="img-fluid rounded" alt="Form preview">
                                            <div class="mt-2">
                                                <button type="button" class="btn btn-sm btn-outline-danger" id="removeImage">
                                                    <i class="fas fa-trash"></i> Remove
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="d-grid">
                                    <button type="submit" class="btn btn-primary btn-lg" id="generateBtn">
                                        <i class="fas fa-magic"></i> Generate Digital Form
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- AI Processing Status -->
                <div class="col-lg-6">
                    <div class="card h-100">
                        <div class="card-header">
                            <h5 class="mb-0"><i class="fas fa-robot text-success"></i> AI Processing Status</h5>
                        </div>
                        <div class="card-body">
                            <div id="processingStatus" style="display: none;">
                                <div class="text-center mb-4">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Processing...</span>
                                    </div>
                                </div>
                                <h6 class="text-center mb-3">AI is analyzing your form...</h6>
                                <div class="progress mb-3">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" id="progressBar" role="progressbar" style="width: 0%"></div>
                                </div>
                                <div class="processing-steps">
                                    <div class="step" id="step1">
                                        <i class="fas fa-eye text-muted"></i> Analyzing image structure...
                                    </div>
                                    <div class="step" id="step2">
                                        <i class="fas fa-search text-muted"></i> Detecting form fields...
                                    </div>
                                    <div class="step" id="step3">
                                        <i class="fas fa-code text-muted"></i> Generating HTML form...
                                    </div>
                                    <div class="step" id="step4">
                                        <i class="fas fa-check text-muted"></i> Validating form structure...
                                    </div>
                                </div>
                            </div>

                            <div id="successStatus" style="display: none;">
                                <div class="text-center text-success mb-3">
                                    <i class="fas fa-check-circle fa-3x"></i>
                                    <h5 class="mt-2">Form Generated Successfully!</h5>
                                </div>
                                <div class="alert alert-success">
                                    <strong>Great!</strong> Your digital form has been created and is ready for use.
                                </div>
                                <div class="d-grid gap-2">
                                    <a href="#" id="previewFormBtn" class="btn btn-outline-primary">
                                        <i class="fas fa-eye"></i> Preview Form
                                    </a>
                                    <a href="/pages/forms" class="btn btn-success">
                                        <i class="fas fa-list"></i> View All Forms
                                    </a>
                                </div>
                            </div>

                            <div id="errorStatus" style="display: none;">
                                <div class="text-center text-danger mb-3">
                                    <i class="fas fa-exclamation-triangle fa-3x"></i>
                                    <h5 class="mt-2">Generation Failed</h5>
                                </div>
                                <div class="alert alert-danger" id="errorMessage">
                                    <!-- Error message will be displayed here -->
                                </div>
                                <div class="d-grid">
                                    <button type="button" class="btn btn-outline-primary" id="retryBtn">
                                        <i class="fas fa-redo"></i> Try Again
                                    </button>
                                </div>
                            </div>

                            <!-- Help Information -->
                            <div id="helpInfo">
                                <h6><i class="fas fa-lightbulb text-warning"></i> Tips for Best Results</h6>
                                <ul class="small text-muted">
                                    <li><strong>Images:</strong> Use high-quality, clear images with good contrast</li>
                                    <li><strong>PDFs:</strong> Ensure text is selectable (not scanned images)</li>
                                    <li><strong>Word Docs:</strong> Use DOCX format for better results than DOC</li>
                                    <li>Include all form fields and instructions</li>
                                    <li>Avoid corrupted or password-protected files</li>
                                </ul>

                                <h6 class="mt-3"><i class="fas fa-info-circle text-info"></i> How it Works</h6>
                                <ol class="small text-muted">
                                    <li>Upload your form file (image, PDF, or Word document)</li>
                                    <li>AI analyzes the content and identifies form fields</li>
                                    <li>Digital form is generated with appropriate input types</li>
                                    <li>Form is saved and ready for clients to fill out</li>
                                </ol>

                                <h6 class="mt-3"><i class="fas fa-file-alt text-success"></i> Supported Formats</h6>
                                <div class="row small text-muted">
                                    <div class="col-6">
                                        <strong>Images:</strong>
                                        <ul class="list-unstyled">
                                            <li>• JPG/JPEG</li>
                                            <li>• PNG</li>
                                            <li>• GIF</li>
                                        </ul>
                                    </div>
                                    <div class="col-6">
                                        <strong>Documents:</strong>
                                        <ul class="list-unstyled">
                                            <li>• PDF</li>
                                            <li>• DOC</li>
                                            <li>• DOCX</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.upload-area {
    border: 2px dashed #007bff;
    border-radius: 8px;
    background-color: #f8f9fa;
    transition: all 0.3s ease;
    cursor: pointer;
}

.upload-area:hover {
    border-color: #0056b3;
    background-color: #e7f1ff;
}

.upload-area.dragover {
    border-color: #28a745;
    background-color: #d4edda;
}

.step {
    padding: 8px 0;
    border-left: 3px solid #e9ecef;
    padding-left: 15px;
    margin-bottom: 10px;
    transition: all 0.3s ease;
}

.step.active {
    border-left-color: #007bff;
    color: #007bff;
}

.step.completed {
    border-left-color: #28a745;
    color: #28a745;
}

.step.completed i {
    color: #28a745 !important;
}

.card {
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border: 1px solid rgba(0, 0, 0, 0.125);
}

#imagePreview {
    max-height: 300px;
    object-fit: contain;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const uploadArea = document.getElementById('uploadArea');
    const formFile = document.getElementById('formFile');
    const browseLink = document.getElementById('browseLink');
    const previewArea = document.getElementById('previewArea');
    const imagePreview = document.getElementById('imagePreview');
    const removeImage = document.getElementById('removeImage');
    const uploadForm = document.getElementById('uploadForm');
    const generateBtn = document.getElementById('generateBtn');
    const processingStatus = document.getElementById('processingStatus');
    const successStatus = document.getElementById('successStatus');
    const errorStatus = document.getElementById('errorStatus');
    const helpInfo = document.getElementById('helpInfo');
    const retryBtn = document.getElementById('retryBtn');

    // File upload handling
    browseLink.addEventListener('click', function(e) {
        e.preventDefault();
        formFile.click();
    });

    uploadArea.addEventListener('click', function() {
        formFile.click();
    });

    uploadArea.addEventListener('dragover', function(e) {
        e.preventDefault();
        uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', function() {
        uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', function(e) {
        e.preventDefault();
        uploadArea.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFileSelect(files[0]);
        }
    });

    formFile.addEventListener('change', function() {
        if (this.files.length > 0) {
            handleFileSelect(this.files[0]);
        }
    });

    removeImage.addEventListener('click', function() {
        formFile.value = '';
        previewArea.style.display = 'none';
        uploadArea.querySelector('.upload-content').style.display = 'block';
    });

    function handleFileSelect(file) {
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
        const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.pdf', '.doc', '.docx'];
        
        const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
        
        if (!allowedTypes.includes(file.type) && !allowedExtensions.includes(fileExtension)) {
            alert('Please select a supported file format: JPG, PNG, GIF, PDF, DOC, or DOCX.');
            return;
        }

        if (file.size > 10 * 1024 * 1024) { // 10MB limit
            alert('File size must be less than 10MB.');
            return;
        }

        // Show preview for images, filename for documents
        if (file.type.startsWith('image/')) {
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                uploadArea.querySelector('.upload-content').style.display = 'none';
                previewArea.style.display = 'block';
            };
            reader.readAsDataURL(file);
        } else {
            // For documents, show file info instead of preview
            const fileInfo = document.createElement('div');
            fileInfo.className = 'file-info text-center p-4';
            fileInfo.innerHTML = `
                <i class="fas fa-file-${getFileIcon(fileExtension)} fa-3x text-primary mb-3"></i>
                <h6>${file.name}</h6>
                <p class="text-muted">${(file.size / 1024 / 1024).toFixed(2)} MB</p>
            `;
            
            previewArea.innerHTML = '';
            previewArea.appendChild(fileInfo);
            
            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.className = 'btn btn-sm btn-outline-danger mt-2';
            removeBtn.innerHTML = '<i class="fas fa-trash"></i> Remove';
            removeBtn.addEventListener('click', function() {
                formFile.value = '';
                previewArea.style.display = 'none';
                uploadArea.querySelector('.upload-content').style.display = 'block';
            });
            fileInfo.appendChild(removeBtn);
            
            uploadArea.querySelector('.upload-content').style.display = 'none';
            previewArea.style.display = 'block';
        }
    }

    function getFileIcon(extension) {
        switch(extension) {
            case '.pdf': return 'pdf';
            case '.doc':
            case '.docx': return 'word';
            default: return 'alt';
        }
    }

    // Form submission
    uploadForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData();
        formData.append('formFile', formFile.files[0]);
        formData.append('formName', document.getElementById('formName').value);
        formData.append('formDescription', document.getElementById('formDescription').value);
        formData.append('formCategory', document.getElementById('formCategory').value);

        generateForm(formData);
    });

    async function generateForm(formData) {
        // Hide help and show processing
        helpInfo.style.display = 'none';
        processingStatus.style.display = 'block';
        successStatus.style.display = 'none';
        errorStatus.style.display = 'none';
        generateBtn.disabled = true;

        // Simulate progress steps
        simulateProgress();

        try {
            const response = await fetch('/api/forms/generate', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const result = await response.json();
                showSuccess(result);
            } else {
                const error = await response.text();
                showError(error);
            }
        } catch (error) {
            console.error('Error generating form:', error);
            showError('Network error occurred. Please try again.');
        } finally {
            generateBtn.disabled = false;
        }
    }

    function simulateProgress() {
        const steps = ['step1', 'step2', 'step3', 'step4'];
        const progressBar = document.getElementById('progressBar');
        let currentStep = 0;

        const interval = setInterval(() => {
            if (currentStep > 0) {
                document.getElementById(steps[currentStep - 1]).classList.remove('active');
                document.getElementById(steps[currentStep - 1]).classList.add('completed');
            }
            
            if (currentStep < steps.length) {
                document.getElementById(steps[currentStep]).classList.add('active');
                progressBar.style.width = ((currentStep + 1) / steps.length * 100) + '%';
                currentStep++;
            } else {
                clearInterval(interval);
            }
        }, 1500);
    }

    function showSuccess(result) {
        processingStatus.style.display = 'none';
        successStatus.style.display = 'block';
        
        const previewBtn = document.getElementById('previewFormBtn');
        previewBtn.href = `/forms/fill/${result.formId}`;
    }

    function showError(message) {
        processingStatus.style.display = 'none';
        errorStatus.style.display = 'block';
        document.getElementById('errorMessage').textContent = message;
    }

    function resetStatus() {
        processingStatus.style.display = 'none';
        successStatus.style.display = 'none';
        errorStatus.style.display = 'none';
        helpInfo.style.display = 'block';
        
        // Reset progress steps
        document.querySelectorAll('.step').forEach(step => {
            step.classList.remove('active', 'completed');
        });
        document.getElementById('progressBar').style.width = '0%';
    }

    retryBtn.addEventListener('click', resetStatus);
});
</script> 